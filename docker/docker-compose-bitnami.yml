# https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/3e7dfb6857db2dda857199d4e3107e12f2893473/week_6_stream_processing/python/docker/kafka/docker-compose.yml
version: '3.6'

x-build:
  &default-build
  context: .
  dockerfile: docker/prefect_docker

x-app-vars:
  &default-app-vars
  PREFECT_ORION_API_HOST: 0.0.0.0
  PREFECT_ORION_DATABASE_CONNECTION_URL: postgresql+asyncpg://root:admin@pgdatabase:5432/db
  PREFECT_ORION_ANALYTICS_ENABLED: "false"
  PREFECT_LOGGING_SERVER_LEVEL: DEBUG
  PREFECT_LOCAL_STORAGE_PATH: "/tmp/prefect/storage"
services:
  orion:
    build:
      <<: *default-build
      target: base
    container_name: orion
    restart: on-failure
    entrypoint: [ "prefect", "orion", "start", "--host", "0.0.0.0" ]
    ports:
      - 4200:4200
    environment:
      <<: *default-app-vars
      PREFECT_API_URL: http://localhost:4200/api
    depends_on:
      - pgdatabase
    extra_hosts:
      - "host.docker.internal:host-gateway"
  prefect-agent:
    build:
      <<: *default-build
      target: agent
    container_name: prefect-agent
    command:
      - prefect
      - agent
      - start
      - -q
      - default
    depends_on:
      - orion
      - zookeeper
      - kafka
    environment:
      <<: *default-app-vars
      PREFECT_API_URL: http://host.docker.internal:4200/api
    volumes:
      - "./flows:/opt/prefect/flows"
      - "./data/prefect_data:/opt/prefect/data"
      - "./prefect_deployments:/opt/prefect/deployments"
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "host.docker.internal:host-gateway"
  pgdatabase:
    image: ubuntu/postgres:latest
    container_name: pgdatabase
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=db
      # - PGDTA=/var/lib/postgresql/pgdata
    volumes:
      - "./data/db_data:/var/lib/postgresql/data:rm"
      # - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5433:5432"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  pgadmin:
    image: dpage/pgadmin4:6.20
    container_name: pgadmin
    user: root
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8090:80"
    volumes:
      - "./data/pgadmin_data:/var/lib/pgadmin"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  datafeeder:
    build:
      context: .
      dockerfile: docker/datafeeder_docker
    container_name: datafeeder
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
    tty: true
    environment:
      # KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8081"
      KAFKA_BOOSTRAP_SERVER_NAME: kafka
      KAFKA_BOOSTRAP_SERVER_PORT: 9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # SCHEMA_REGISTRY_SERVER: schema-registry
      SCHEMA_REGISTRY_SERVER_PORT: 8081
    volumes:
      - ./ingest:/opt/datafeeder/
      - ./data/tmp:/tmp/
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      # - "${DOCKER_HOST_IP}:8084:80"
      # - "${DOCKER_HOST_IP}:8000:8000"
      - "127.0.0.1:8084:80"
      - "127.0.0.1:8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "./data/zookeeper_data:/bitnami"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      # - ZOOKEEPER_CLIENT_PORT=2181
    extra_hosts:
      - "host.docker.internal:host-gateway"
  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
      - "29094:29092"
    volumes:
      - "./data/kafka_data:/bitnami/kafka"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT 
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8081"
    depends_on:
      - zookeeper
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    extra_hosts:
      - "host.docker.internal:host-gateway" 

  schema-registry:
    # image: confluentinc/cp-schema-registry:3.3.0
    image: bitnami/schema-registry:7.0.8
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka:29092
      # SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      # SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_DEBUG: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "host.docker.internal:host-gateway" 